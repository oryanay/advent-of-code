(ns aoc.day6)

(def sample [3,4,3,1,2])
(def input [1,1,3,5,1,1,1,4,1,5,1,1,1,1,1,1,1,3,1,1,1,1,2,5,1,1,1,1,1,2,1,4,1,4,1,1,1,1,1,3,1,1,5,1,1,1,4,1,1,1,4,1,1,3,5,1,1,1,1,4,1,5,4,1,1,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,5,1,1,1,3,4,1,1,1,1,3,1,1,1,1,1,4,1,1,3,1,1,3,1,1,1,1,1,3,1,5,2,3,1,2,3,1,1,2,1,2,4,5,1,5,1,4,1,1,1,1,2,1,5,1,1,1,1,1,5,1,1,3,1,1,1,1,1,1,4,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,3,2,1,1,1,1,2,2,1,2,1,1,1,5,5,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,4,2,1,4,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,5,1,1,1,1,1,1,1,1,3,1,1,3,3,1,1,1,3,5,1,1,4,1,1,1,1,1,4,1,1,3,1,1,1,1,1,1,1,1,2,1,5,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1])

(->> sample
     frequencies);; => {3 2, 4 1, 1 1, 2 1}

(defn assoc-or-update [m v]
  (if-let [x (get m 6)] (assoc m 6 (+ x v)) (assoc m 6 v)))

(defn day [m]
  (let [xm (into {} (map (fn [[k v]] [(dec k) v]) m))
        xr (dissoc xm -1)]
    (if-let [v (get xm -1)]
      (-> xr
          (assoc-or-update v)
          (assoc 8 v))
      xr)))

(->> (take 81 (iterate day  {3 2, 4 1, 1 1, 2 1}))
     last
     vals
     (apply +))

(->> (take 81 (iterate day (frequencies input)))
     last
     vals
     (apply +));; => 396210


;; part 2 - let's see if we overflow
;;

(->> (take 257  (iterate day (frequencies sample)))
     last
     vals
     (apply +));; => 26984457539

(->> (take 257  (iterate day (frequencies input)))
     last
     vals
     (apply +));; => 1770823541496
